generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

model book {
  id           Int       @id @default(autoincrement())
  id_subscribe Int
  id_lesson    Int
  lesson       lesson    @relation(fields: [id_lesson], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_book__id_lesson")
  subscribe    subscribe @relation(fields: [id_subscribe], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_book__id_subscribe")

  @@index([id_lesson], map: "idx_book__id_lesson")
  @@index([id_subscribe], map: "idx_book__id_subscribe")
}

model client {
  id          Int         @id @default(autoincrement())
  full_name   String      @db.VarChar(100)
  dt_birthday String      @db.VarChar(100)
  passport    String      @db.VarChar(100)
  phone       String      @db.VarChar(100)
  email       String      @db.VarChar(100)
  subscribe   subscribe[]
}

model hall {
  id        Int      @id @default(autoincrement())
  capacity  Int
  inventory Boolean?
  lesson    lesson[]
}

model lesson {
  id                      Int                  @id @default(autoincrement())
  id_hall                 Int
  id_specialty_of_teacher Int
  dt                      DateTime             @db.Timestamp(6)
  cmplx                   Int?
  book                    book[]
  hall                    hall                 @relation(fields: [id_hall], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lesson__id_hall")
  specialty_of_teacher    specialty_of_teacher @relation(fields: [id_specialty_of_teacher], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lesson__id_specialty_of_teacher")

  @@index([id_hall], map: "idx_lesson__id_hall")
  @@index([id_specialty_of_teacher], map: "idx_lesson__id_specialty_of_teacher")
}

model specialty_of_teacher {
  id           Int       @id @default(autoincrement())
  id_tp_lesson Int
  id_teacher   Int
  lesson       lesson[]
  teacher      teacher   @relation(fields: [id_teacher], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_specialty_of_teacher__id_teacher")
  tp_lesson    tp_lesson @relation(fields: [id_tp_lesson], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_specialty_of_teacher__id_tp_lesson")

  @@index([id_teacher], map: "idx_specialty_of_teacher__id_teacher")
  @@index([id_tp_lesson], map: "idx_specialty_of_teacher__id_tp_lesson")
}

model subscribe {
  id        Int       @id @default(autoincrement())
  id_client Int
  dt_begin  DateTime? @db.Date
  dt_end    DateTime? @db.Date
  amount    Int
  book      book[]
  client    client    @relation(fields: [id_client], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_subscribe__id_client")

  @@index([id_client], map: "idx_subscribe__id_client")
}

model teacher {
  id                   Int                    @id @default(autoincrement())
  full_name            String                 @db.VarChar(100)
  experience           String
  education            String
  gender               String                 @db.VarChar(50)
  specialty_of_teacher specialty_of_teacher[]
}

model tp_lesson {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(100)
  discription          String
  src_image            String                 @db.VarChar(100)
  is_visible           Boolean
  specialty_of_teacher specialty_of_teacher[]
}
